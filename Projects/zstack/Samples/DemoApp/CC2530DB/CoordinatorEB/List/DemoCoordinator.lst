###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:55:19
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\Source\DemoCoordinator.c
#    Command line       =  
#        -f
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0x0DAD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\Source\DemoCoordinator.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\DemoCoordinator.lst
#    Object file        =  
#        D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\DemoCoordinator.r51
#
###############################################################################

D:\School\Jaar_3\WTWS\Projects\WirelessSensorNetworksPracticum\Projects\zstack\Samples\DemoApp\Source\DemoCoordinator.c
      1          /**************************************************************************************************
      2            Filename:       DemoCoordinator.c
      3          
      4            Description:    Coordinator application for the sensor demo utilizing Simple API.
      5          
      6                            The coordinator node functions as a gateway. The node accepts
      7                            incoming reports from the sensor nodes (router and end device)
      8                            and can send the reports via the UART to a PC tool.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          #include "sapi.h"
     46          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     47          #include "hal_led.h"
     48          #include "hal_uart.h"
     49          #include "DemoApp.h"
     50          
     51          /******************************************************************************
     52           * CONSTANTS
     53           */
     54          // General UART frame offsets
     55          #define FRAME_SOF_OFFSET                    0
     56          #define FRAME_LENGTH_OFFSET                 1
     57          #define FRAME_CMD0_OFFSET                   2
     58          #define FRAME_CMD1_OFFSET                   3
     59          #define FRAME_DATA_OFFSET                   4
     60          
     61          // ZB_RECEIVE_DATA_INDICATION offsets
     62          #define ZB_RECV_SRC_OFFSET                  0
     63          #define ZB_RECV_CMD_OFFSET                  2
     64          #define ZB_RECV_LEN_OFFSET                  4
     65          #define ZB_RECV_DATA_OFFSET                 6
     66          #define ZB_RECV_FCS_OFFSET                  8
     67          
     68          // ZB_RECEIVE_DATA_INDICATION frame length
     69          #define ZB_RECV_LENGTH                      15
     70          
     71          // PING response frame length and offset
     72          #define SYS_PING_RSP_LENGTH                 7
     73          #define SYS_PING_CMD_OFFSET                 1
     74          
     75          // Stack Profile
     76          #define ZIGBEE_2007                         0x0040
     77          #define ZIGBEE_PRO_2007                     0x0041
     78          
     79          #ifdef ZIGBEEPRO
     80          #define STACK_PROFILE                       ZIGBEE_PRO_2007
     81          #else
     82          #define STACK_PROFILE                       ZIGBEE_2007
     83          #endif
     84          
     85          #define CPT_SOP                             0xFE
     86          #define SYS_PING_REQUEST                    0x0021
     87          #define SYS_PING_RESPONSE                   0x0161
     88          #define ZB_RECEIVE_DATA_INDICATION          0x8746
     89          
     90          // Application osal event identifiers
     91          #define MY_START_EVT                        0x0001
     92          
     93          // Port and pin for door limit switch
     94          #define PORT_DOOR_LIMIT_SWITCH              0
     95          #define PIN_DOOR_LIMIT_SWITCH               5
     96          // Port and pin for green LED
     97          #define PORT_GREEN_LED                      1
     98          #define PIN_GREEN_LED                       2
     99          // Port and pin for door control
    100          #define PORT_DOOR_CONTROL                   0
    101          #define PIN_DOOR_CONTROL                    7
    102          
    103          /******************************************************************************
    104           * TYPEDEFS
    105           */
    106          typedef struct
    107          {
    108            uint16              source;
    109            uint16              parent;
    110            uint8               temp;
    111            uint8               voltage;
    112          } gtwData_t;
    113          
    114          /******************************************************************************
    115           * LOCAL VARIABLES
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 appState =             APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          static uint8 myStartRetryDelay =    10;          // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          static gtwData_t gtwData;
   \                     gtwData:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          static uint8 open =                 0;
   \                     open:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    121          
    122          /******************************************************************************
    123           * LOCAL FUNCTIONS
    124           */
    125          static uint8 calcFCS(uint8 *pBuf, uint8 len);
    126          static void sysPingReqRcvd(void);
    127          static void sysPingRsp(void);
    128          static void sendGtwReport(gtwData_t *gtwData);
    129          
    130          /******************************************************************************
    131           * GLOBAL VARIABLES
    132           */
    133          // Inputs and Outputs for Collector device
    134          #define NUM_OUT_CMD_COLLECTOR           0
    135          #define NUM_IN_CMD_COLLECTOR            1
    136          
    137          // List of output and input commands for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    138          const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_InCmdList:
   \   000000   0200         DW 2
    139          {
    140            SENSOR_REPORT_CMD_ID,
    141          };
    142          
    143          // Define SimpleDescriptor for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    144          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0200         DW 2
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
    145          {
    146            MY_ENDPOINT_ID,             //  Endpoint
    147            MY_PROFILE_ID,              //  Profile ID
    148            DEV_ID_COLLECTOR,           //  Device ID
    149            DEVICE_VERSION_COLLECTOR,   //  Device Version
    150            0,                          //  Reserved
    151            NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
    152            (cId_t *) zb_InCmdList,     //  Input Command List
    153            NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
    154            (cId_t *) NULL              //  Output Command List
    155          };
    156          
    157          /******************************************************************************
    158           * GLOBAL FUNCTIONS
    159           */
    160          
    161          /******************************************************************************
    162           * @fn          zb_HandleOsalEvent
    163           *
    164           * @brief       The zb_HandleOsalEvent function is called by the operating
    165           *              system when a task event is set
    166           *
    167           * @param       event - Bitmask containing the events that have been set
    168           *
    169           * @return      none
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    172          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if( event & SYS_EVENT_MSG )
    174            {
    175            }
    176          
    177            if( event & ZB_ENTRY_EVENT )
   \   000009   EE           MOV     A,R6
   \   00000A   5400         ANL     A,#0x0
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   602E         JZ      ??zb_HandleOsalEvent_0
    178            {
    179              /* If we get this event, then we can initialise things */
    180              
    181              // Initialise UART
    182              initUart(uartRxCB);
   \   000015                ; Setup parameters for call to function initUart
   \   000015   7A..         MOV     R2,#`??uartRxCB::?relay` & 0xff
   \   000017   7B..         MOV     R3,#(`??uartRxCB::?relay` >> 8) & 0xff
   \   000019   12....       LCALL   `??initUart::?relay` ; Banked call to: initUart
    183              
    184              // Initialise the door limit switch as input and internal pull-up activated
    185              //MCU_IO_INPUT( PORT_DOOR_LIMIT_SWITCH, PIN_DOOR_LIMIT_SWITCH, MCU_IO_PULLUP );
    186              MCU_IO_DIR_INPUT( PORT_DOOR_LIMIT_SWITCH, PIN_DOOR_LIMIT_SWITCH );
   \   00001C   53FDDF       ANL     0xfd,#0xdf
    187              // Initialise the green LED as output
    188              MCU_IO_DIR_OUTPUT( PORT_GREEN_LED, PIN_GREEN_LED );
   \   00001F   43FE04       ORL     0xfe,#0x4
    189              // Initialise the door control as output
    190              MCU_IO_DIR_OUTPUT( PORT_DOOR_CONTROL, PIN_DOOR_CONTROL );
   \   000022   43FD80       ORL     0xfd,#0x80
    191          
    192              // blind LED 1 to indicate starting/joining a network
    193              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   7CF4         MOV     R4,#-0xc
   \   000027   7D01         MOV     R5,#0x1
   \   000029   7B32         MOV     R3,#0x32
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    194              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000032                ; Setup parameters for call to function HalLedSet
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7902         MOV     R1,#0x2
   \   000036   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000039   E9           MOV     A,R1
    195          
    196              // Start the device
    197              appState = APP_START;
   \   00003A   90....       MOV     DPTR,#appState
   \   00003D   7401         MOV     A,#0x1
   \   00003F   F0           MOVX    @DPTR,A
    198              zb_StartRequest();
   \   000040                ; Setup parameters for call to function zb_StartRequest
   \   000040   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    199            }
    200          
    201            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000043   EE           MOV     A,R6
   \   000044   A2E0         MOV     C,0xE0 /* A   */.0
   \   000046   5003         JNC     ??zb_HandleOsalEvent_1
    202            {
    203              zb_StartRequest();
   \   000048                ; Setup parameters for call to function zb_StartRequest
   \   000048   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    204            }
    205          }
   \                     ??zb_HandleOsalEvent_1:
   \   00004B   7F01         MOV     R7,#0x1
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000050                REQUIRE P0DIR
   \   000050                REQUIRE P1DIR
    206          
    207          /******************************************************************************
    208           * @fn      zb_HandleKeys
    209           *
    210           * @brief   Handles all key events for this device.
    211           *
    212           * @param   shift - true if in shift/alt.
    213           * @param   keys - bit field for key events. Valid entries:
    214           *                 EVAL_SW4
    215           *                 EVAL_SW3
    216           *                 EVAL_SW2
    217           *                 EVAL_SW1
    218           *
    219           * @return  none
    220           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    221          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    222          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    223            static uint8 allowBind = FALSE;
    224          
    225            // shift is not used and keys HAL_KEY_SW_3 and HAL_KEY_SW_4 are not used, so 
    226            // removed code
    227            if ( keys & HAL_KEY_SW_1 )
   \   000007   EE           MOV     A,R6
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   5052         JNC     ??zb_HandleKeys_0
    228            {
    229              
    230              MCU_IO_SET( PORT_DOOR_CONTROL, PIN_DOOR_CONTROL, open );
   \   00000C   90....       MOV     DPTR,#open
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#open
   \   000014   E0           MOVX    A,@DPTR
   \   000015   A2E0         MOV     C,0xE0 /* A   */.0
   \   000017   9287         MOV     0x80.7,C
    231              open = !open;
   \   000019   90....       MOV     DPTR,#open
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   7008         JNZ     ??zb_HandleKeys_1
   \   00001F   90....       MOV     DPTR,#open
   \   000022   7401         MOV     A,#0x1
   \   000024   F0           MOVX    @DPTR,A
   \   000025   8006         SJMP    ??zb_HandleKeys_2
   \                     ??zb_HandleKeys_1:
   \   000027   90....       MOV     DPTR,#open
   \   00002A   7400         MOV     A,#0x0
   \   00002C   F0           MOVX    @DPTR,A
    232              
    233              if ( appState == APP_RUN )
   \                     ??zb_HandleKeys_2:
   \   00002D   90....       MOV     DPTR,#appState
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6404         XRL     A,#0x4
   \   000033   7029         JNZ     ??zb_HandleKeys_0
    234              {
    235                allowBind ^= 1;
   \   000035   90....       MOV     DPTR,#??allowBind
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6401         XRL     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    236                if ( allowBind )
   \   00003C   90....       MOV     DPTR,#??allowBind
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   600F         JZ      ??zb_HandleKeys_3
    237                {
    238                  // Turn ON Allow Bind mode infinitly
    239                  zb_AllowBind( 0xFF );
   \   000042                ; Setup parameters for call to function zb_AllowBind
   \   000042   79FF         MOV     R1,#-0x1
   \   000044   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    240                  HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000047                ; Setup parameters for call to function HalLedSet
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7902         MOV     R1,#0x2
   \   00004B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00004E   E9           MOV     A,R1
   \   00004F   800D         SJMP    ??zb_HandleKeys_0
    241                }
    242                else
    243                {
    244                  // Turn OFF Allow Bind mode infinitly
    245                  zb_AllowBind( 0x00 );
   \                     ??zb_HandleKeys_3:
   \   000051                ; Setup parameters for call to function zb_AllowBind
   \   000051   7900         MOV     R1,#0x0
   \   000053   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    246                  HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000056                ; Setup parameters for call to function HalLedSet
   \   000056   7A00         MOV     R2,#0x0
   \   000058   7902         MOV     R1,#0x2
   \   00005A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00005D   E9           MOV     A,R1
    247                }
    248              }
    249            }
    250            if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_0:
   \   00005E   EE           MOV     A,R6
   \   00005F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000061   5016         JNC     ??zb_HandleKeys_4
    251            {
    252              uint8 result = !!MCU_IO_GET( PORT_DOOR_LIMIT_SWITCH, PIN_DOOR_LIMIT_SWITCH );
   \   000063   A285         MOV     C,0x80.5
   \   000065   5004         JNC     ??zb_HandleKeys_5
   \   000067   D2F0         SETB    B.0
   \   000069   8002         SJMP    ??zb_HandleKeys_6
   \                     ??zb_HandleKeys_5:
   \   00006B   C2F0         CLR     B.0
   \                     ??zb_HandleKeys_6:
   \   00006D   A2F0         MOV     C,B.0
   \   00006F   E4           CLR     A
   \   000070   33           RLC     A
   \   000071   F8           MOV     R0,A
    253              
    254              MCU_IO_SET( PORT_GREEN_LED, PIN_GREEN_LED, result );
   \   000072   E8           MOV     A,R0
   \   000073   F9           MOV     R1,A
   \   000074   E8           MOV     A,R0
   \   000075   A2E0         MOV     C,0xE0 /* A   */.0
   \   000077   9292         MOV     0x90.2,C
    255             
    256              /*if ( appState == APP_RUN ) 
    257              {
    258          
    259              }*/
    260            }
    261          }
   \                     ??zb_HandleKeys_4:
   \   000079   7F01         MOV     R7,#0x1
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00007E                REQUIRE _A_P0
   \   00007E                REQUIRE _A_P1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??allowBind:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    262          
    263          /******************************************************************************
    264           * @fn          zb_StartConfirm
    265           *
    266           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    267           *              after a start request operation completes
    268           *
    269           * @param       status - The status of the start operation.  Status of
    270           *                       ZB_SUCCESS indicates the start operation completed
    271           *                       successfully.  Else the status is an error code.
    272           *
    273           * @return      none
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    276          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    277            // If the device sucessfully started, change state to running
    278            if ( status == ZB_SUCCESS )
   \   000007   EE           MOV     A,R6
   \   000008   7010         JNZ     ??zb_StartConfirm_0
    279            {
    280              // Set LED 1 to indicate that node is operational on the network
    281              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000A                ; Setup parameters for call to function HalLedSet
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000011   E9           MOV     A,R1
    282          
    283              // Change application state
    284              appState = APP_RUN;
   \   000012   90....       MOV     DPTR,#appState
   \   000015   7404         MOV     A,#0x4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   8024         SJMP    ??zb_StartConfirm_1
    285            }
    286            else
    287            {
    288              // Try again later with a delay
    289              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00001A                ; Setup parameters for call to function osal_start_timerEx
   \   00001A   90....       MOV     DPTR,#myStartRetryDelay
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0,A
   \   000020   E4           CLR     A
   \   000021   F5..         MOV     ?V1,A
   \   000023   F5..         MOV     ?V2,A
   \   000025   F5..         MOV     ?V3,A
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   90....       MOV     DPTR,#sapi_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003D   E9           MOV     A,R1
    290            }
    291          }
   \                     ??zb_StartConfirm_1:
   \   00003E   7F04         MOV     R7,#0x4
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    292          
    293          /******************************************************************************
    294           * @fn          zb_SendDataConfirm
    295           *
    296           * @brief       The zb_SendDataConfirm callback function is called by the
    297           *              ZigBee stack after a send data operation completes
    298           *
    299           * @param       handle - The handle identifying the data transmission.
    300           *              status - The status of the operation.
    301           *
    302           * @return      none
    303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    305          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    306            (void)handle;
    307            (void)status;
    308          }
   \   000000   02....       LJMP    ?BRET
    309          
    310          /******************************************************************************
    311           * @fn          zb_BindConfirm
    312           *
    313           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    314           *              after a bind operation completes.
    315           *
    316           * @param       commandId - The command ID of the binding being confirmed.
    317           *              status - The status of the bind operation.
    318           *
    319           * @return      none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    322          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    323            (void)commandId;
    324            (void)status;
    325          }
   \   000000   02....       LJMP    ?BRET
    326          
    327          /******************************************************************************
    328           * @fn          zb_AllowBindConfirm
    329           *
    330           * @brief       Indicates when another device attempted to bind to this device
    331           *
    332           * @param
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    337          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    338            (void)source;
    339          }
   \   000000   02....       LJMP    ?BRET
    340          
    341          /******************************************************************************
    342           * @fn          zb_FindDeviceConfirm
    343           *
    344           * @brief       The zb_FindDeviceConfirm callback function is called by the
    345           *              ZigBee stack when a find device operation completes.
    346           *
    347           * @param       searchType - The type of search that was performed.
    348           *              searchKey - Value that the search was executed on.
    349           *              result - The result of the search.
    350           *
    351           * @return      none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    354          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    355            (void)searchType;
    356            (void)searchKey;
    357            (void)result;
    358          }
   \   000000   02....       LJMP    ?BRET
    359          
    360          /******************************************************************************
    361           * @fn          zb_ReceiveDataIndication
    362           *
    363           * @brief       The zb_ReceiveDataIndication callback function is called
    364           *              asynchronously by the ZigBee stack to notify the application
    365           *              when data is received from a peer device.
    366           *
    367           * @param       source - The short address of the peer device that sent the data
    368           *              command - The commandId associated with the data
    369           *              len - The number of bytes in the pData parameter
    370           *              pData - The data sent by the peer device
    371           *
    372           * @return      none
    373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    375          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   740B         MOV     A,#0xb
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
    376            (void)command;
    377            (void)len;
    378          
    379            gtwData.parent = BUILD_UINT16(pData[SENSOR_PARENT_OFFSET+1], pData[SENSOR_PARENT_OFFSET]);
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   7F00         MOV     R7,#0x0
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FC           MOV     R4,A
   \   000022   7D00         MOV     R5,#0x0
   \   000024   E4           CLR     A
   \   000025   CC           XCH     A,R4
   \   000026   FD           MOV     R5,A
   \   000027   EE           MOV     A,R6
   \   000028   2C           ADD     A,R4
   \   000029   FC           MOV     R4,A
   \   00002A   EF           MOV     A,R7
   \   00002B   3D           ADDC    A,R5
   \   00002C   FD           MOV     R5,A
   \   00002D   90....       MOV     DPTR,#gtwData + 2
   \   000030   EC           MOV     A,R4
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   ED           MOV     A,R5
   \   000034   F0           MOVX    @DPTR,A
    380            gtwData.source = source;
   \   000035   90....       MOV     DPTR,#gtwData
   \   000038   EA           MOV     A,R2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EB           MOV     A,R3
   \   00003C   F0           MOVX    @DPTR,A
    381            gtwData.temp = *pData;
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   90....       MOV     DPTR,#gtwData + 4
   \   000045   F0           MOVX    @DPTR,A
    382            gtwData.voltage = *(pData+SENSOR_VOLTAGE_OFFSET);
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   90....       MOV     DPTR,#gtwData + 5
   \   00004F   F0           MOVX    @DPTR,A
    383          
    384            // Flash LED 2 once to indicate data reception
    385            HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );
   \   000050                ; Setup parameters for call to function HalLedSet
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7902         MOV     R1,#0x2
   \   000054   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000057   E9           MOV     A,R1
    386          
    387            // Send gateway report
    388            sendGtwReport(&gtwData);
   \   000058                ; Setup parameters for call to function sendGtwReport
   \   000058   7A..         MOV     R2,#gtwData & 0xff
   \   00005A   7B..         MOV     R3,#(gtwData >> 8) & 0xff
   \   00005C   12....       LCALL   `??sendGtwReport::?relay`; Banked call to: sendGtwReport
    389          }
   \   00005F   7F01         MOV     R7,#0x1
   \   000061   02....       LJMP    ?BANKED_LEAVE_XDATA
    390          
    391          /******************************************************************************
    392           * @fn          uartRxCB
    393           *
    394           * @brief       Callback function for UART
    395           *
    396           * @param       port - UART port
    397           *              event - UART event that caused callback
    398           *
    399           * @return      none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    403            (void)port;
    404          
    405            uint8 pBuf[RX_BUF_LEN];
    406            uint16 cmd;
    407            uint16 len;
    408          
    409            if ( event != HAL_UART_TX_EMPTY )
   \   00000C   7410         MOV     A,#0x10
   \   00000E   6E           XRL     A,R6
   \   00000F   604C         JZ      ??uartRxCB_0
    410            {
    411              // Read from UART
    412              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   000011                ; Setup parameters for call to function HalUARTRead
   \   000011   7C80         MOV     R4,#-0x80
   \   000013   7D00         MOV     R5,#0x0
   \   000015   AA..         MOV     R2,?XSP + 0
   \   000017   AB..         MOV     R3,?XSP + 1
   \   000019   7900         MOV     R1,#0x0
   \   00001B   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00001E   8A..         MOV     ?V0,R2
   \   000020   8B..         MOV     ?V1,R3
   \   000022   A8..         MOV     R0,?V0
   \   000024   A9..         MOV     R1,?V1
    413          
    414              if ( len > 0 )
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6033         JZ      ??uartRxCB_0
    415              {
    416                cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET + 1], pBuf[SYS_PING_CMD_OFFSET]);
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   7B00         MOV     R3,#0x0
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   E4           CLR     A
   \   00003D   C8           XCH     A,R0
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   28           ADD     A,R0
   \   000041   F8           MOV     R0,A
   \   000042   EB           MOV     A,R3
   \   000043   39           ADDC    A,R1
   \   000044   F9           MOV     R1,A
    417          
    418                if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) )
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   64FE         XRL     A,#0xfe
   \   00004E   700D         JNZ     ??uartRxCB_0
   \   000050   7421         MOV     A,#0x21
   \   000052   68           XRL     A,R0
   \   000053   7003         JNZ     ??uartRxCB_1
   \   000055   7400         MOV     A,#0x0
   \   000057   69           XRL     A,R1
   \                     ??uartRxCB_1:
   \   000058   7003         JNZ     ??uartRxCB_0
    419                {
    420                  sysPingReqRcvd();
   \   00005A                ; Setup parameters for call to function sysPingReqRcvd
   \   00005A   12....       LCALL   `??sysPingReqRcvd::?relay`; Banked call to: sysPingReqRcvd
    421                }
    422              }
    423            }
    424          }
   \                     ??uartRxCB_0:
   \   00005D   7480         MOV     A,#-0x80
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   7F02         MOV     R7,#0x2
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
    425          
    426          /******************************************************************************
    427           * @fn          sysPingReqRcvd
    428           *
    429           * @brief       Ping request received
    430           *
    431           * @param       none
    432           *
    433           * @return      none
    434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          static void sysPingReqRcvd(void)
   \                     sysPingReqRcvd:
    436          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    437             sysPingRsp();
   \   000004                ; Setup parameters for call to function sysPingRsp
   \   000004   12....       LCALL   `??sysPingRsp::?relay`; Banked call to: sysPingRsp
    438          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    439          
    440          /******************************************************************************
    441           * @fn          sysPingRsp
    442           *
    443           * @brief       Build and send Ping response
    444           *
    445           * @param       none
    446           *
    447           * @return      none
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          static void sysPingRsp(void)
   \                     sysPingRsp:
    450          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 7
   \   000004   74F9         MOV     A,#-0x7
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    451            uint8 pBuf[SYS_PING_RSP_LENGTH];
    452          
    453            // Start of Frame Delimiter
    454            pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   F0           MOVX    @DPTR,A
    455          
    456            // Length
    457            pBuf[FRAME_LENGTH_OFFSET] = 2;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7402         MOV     A,#0x2
   \   000019   F0           MOVX    @DPTR,A
    458          
    459            // Command type
    460            pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE);
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   7461         MOV     A,#0x61
   \   000021   F0           MOVX    @DPTR,A
    461            pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7401         MOV     A,#0x1
   \   000029   F0           MOVX    @DPTR,A
    462          
    463            // Stack profile
    464            pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7441         MOV     A,#0x41
   \   000031   F0           MOVX    @DPTR,A
    465            pBuf[FRAME_DATA_OFFSET + 1] = HI_UINT16(STACK_PROFILE);
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
    466          
    467            // Frame Check Sequence
    468            pBuf[SYS_PING_RSP_LENGTH - 1] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH - 2));
   \   00003A                ; Setup parameters for call to function calcFCS
   \   00003A   7905         MOV     R1,#0x5
   \   00003C   7401         MOV     A,#0x1
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   \   000045   12....       LCALL   `??calcFCS::?relay`  ; Banked call to: calcFCS
   \   000048   E9           MOV     A,R1
   \   000049   C0E0         PUSH    A
   \   00004B   7406         MOV     A,#0x6
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    469          
    470            // Write frame to UART
    471            HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH);
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053   7C07         MOV     R4,#0x7
   \   000055   7D00         MOV     R5,#0x0
   \   000057   AA..         MOV     R2,?XSP + 0
   \   000059   AB..         MOV     R3,?XSP + 1
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    472          }
   \   000060   7407         MOV     A,#0x7
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   D083         POP     DPH
   \   000067   D082         POP     DPL
   \   000069   02....       LJMP    ?BRET
    473          
    474          /******************************************************************************
    475           * @fn          sendGtwReport
    476           *
    477           * @brief       Build and send gateway report
    478           *
    479           * @param       none
    480           *
    481           * @return      none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          static void sendGtwReport(gtwData_t *gtwData)
   \                     sendGtwReport:
    484          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 15
   \   000004   74F1         MOV     A,#-0xf
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    485            uint8 pFrame[ZB_RECV_LENGTH];
    486          
    487            // Start of Frame Delimiter
    488            pFrame[FRAME_SOF_OFFSET] = CPT_SOP; // Start of Frame Delimiter
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   F0           MOVX    @DPTR,A
    489          
    490            // Length
    491            pFrame[FRAME_LENGTH_OFFSET] = 10;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   F0           MOVX    @DPTR,A
    492          
    493            // Command type
    494            pFrame[FRAME_CMD0_OFFSET] = LO_UINT16(ZB_RECEIVE_DATA_INDICATION);
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   7446         MOV     A,#0x46
   \   000021   F0           MOVX    @DPTR,A
    495            pFrame[FRAME_CMD1_OFFSET] = HI_UINT16(ZB_RECEIVE_DATA_INDICATION);
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7487         MOV     A,#-0x79
   \   000029   F0           MOVX    @DPTR,A
    496          
    497            // Source address
    498            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET] = LO_UINT16(gtwData->source);
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   C0E0         PUSH    A
   \   000036   7404         MOV     A,#0x4
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
    499            pFrame[FRAME_DATA_OFFSET + ZB_RECV_SRC_OFFSET+ 1] = HI_UINT16(gtwData->source);
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   E4           CLR     A
   \   000048   C9           XCH     A,R1
   \   000049   F8           MOV     R0,A
   \   00004A   E8           MOV     A,R0
   \   00004B   C0E0         PUSH    A
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
    500          
    501            // Command ID
    502            pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET] = LO_UINT16(SENSOR_REPORT_CMD_ID);
   \   000055   7406         MOV     A,#0x6
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7402         MOV     A,#0x2
   \   00005C   F0           MOVX    @DPTR,A
    503            pFrame[FRAME_DATA_OFFSET + ZB_RECV_CMD_OFFSET+ 1] = HI_UINT16(SENSOR_REPORT_CMD_ID);
   \   00005D   7407         MOV     A,#0x7
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   7400         MOV     A,#0x0
   \   000064   F0           MOVX    @DPTR,A
    504          
    505            // Length
    506            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET] = LO_UINT16(4);
   \   000065   7408         MOV     A,#0x8
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   7404         MOV     A,#0x4
   \   00006C   F0           MOVX    @DPTR,A
    507            pFrame[FRAME_DATA_OFFSET + ZB_RECV_LEN_OFFSET+ 1] = HI_UINT16(4);
   \   00006D   7409         MOV     A,#0x9
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   7400         MOV     A,#0x0
   \   000074   F0           MOVX    @DPTR,A
    508          
    509            // Data
    510            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET] = gtwData->temp;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   C0E0         PUSH    A
   \   000080   740A         MOV     A,#0xa
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   D0E0         POP     A
   \   000087   F0           MOVX    @DPTR,A
    511            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 1] = gtwData->voltage;
   \   000088   8A82         MOV     DPL,R2
   \   00008A   8B83         MOV     DPH,R3
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C0E0         PUSH    A
   \   000094   740B         MOV     A,#0xb
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   D0E0         POP     A
   \   00009B   F0           MOVX    @DPTR,A
    512            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 2] = LO_UINT16(gtwData->parent);
   \   00009C   8A82         MOV     DPL,R2
   \   00009E   8B83         MOV     DPH,R3
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   E8           MOV     A,R0
   \   0000A8   C0E0         PUSH    A
   \   0000AA   740C         MOV     A,#0xc
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
    513            pFrame[FRAME_DATA_OFFSET + ZB_RECV_DATA_OFFSET+ 3] = HI_UINT16(gtwData->parent);
   \   0000B2   8A82         MOV     DPL,R2
   \   0000B4   8B83         MOV     DPH,R3
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F8           MOV     R0,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F9           MOV     R1,A
   \   0000BD   E4           CLR     A
   \   0000BE   C9           XCH     A,R1
   \   0000BF   F8           MOV     R0,A
   \   0000C0   E8           MOV     A,R0
   \   0000C1   C0E0         PUSH    A
   \   0000C3   740D         MOV     A,#0xd
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
    514          
    515            // Frame Check Sequence
    516            pFrame[ZB_RECV_LENGTH - 1] = calcFCS(&pFrame[FRAME_LENGTH_OFFSET], (ZB_RECV_LENGTH - 2) );
   \   0000CB                ; Setup parameters for call to function calcFCS
   \   0000CB   790D         MOV     R1,#0xd
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   \   0000D6   12....       LCALL   `??calcFCS::?relay`  ; Banked call to: calcFCS
   \   0000D9   E9           MOV     A,R1
   \   0000DA   C0E0         PUSH    A
   \   0000DC   740E         MOV     A,#0xe
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   D0E0         POP     A
   \   0000E3   F0           MOVX    @DPTR,A
    517          
    518            // Write report to UART
    519            HalUARTWrite(HAL_UART_PORT_0,pFrame, ZB_RECV_LENGTH);
   \   0000E4                ; Setup parameters for call to function HalUARTWrite
   \   0000E4   7C0F         MOV     R4,#0xf
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   AA..         MOV     R2,?XSP + 0
   \   0000EA   AB..         MOV     R3,?XSP + 1
   \   0000EC   7900         MOV     R1,#0x0
   \   0000EE   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    520          }
   \   0000F1   740F         MOV     A,#0xf
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   D083         POP     DPH
   \   0000F8   D082         POP     DPL
   \   0000FA   02....       LJMP    ?BRET
    521          
    522          /******************************************************************************
    523           * @fn          calcFCS
    524           *
    525           * @brief       This function calculates the FCS checksum for the serial message
    526           *
    527           * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
    528           *              len - Length of the pBuf.
    529           *
    530           * @return      The calculated FCS.
    531           ******************************************************************************
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          static uint8 calcFCS(uint8 *pBuf, uint8 len)
   \                     calcFCS:
    534          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    535            uint8 rtrn = 0;
   \   000006   7900         MOV     R1,#0x0
   \   000008   8011         SJMP    ??calcFCS_0
    536          
    537            while ( len-- )
    538            {
    539              rtrn ^= *pBuf++;
   \                     ??calcFCS_1:
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   C9           XCH     A,R1
   \   000010   69           XRL     A,R1
   \   000011   C9           XCH     A,R1
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
    540            }
   \                     ??calcFCS_0:
   \   00001B   E8           MOV     A,R0
   \   00001C   FC           MOV     R4,A
   \   00001D   74FF         MOV     A,#-0x1
   \   00001F   2C           ADD     A,R4
   \   000020   F8           MOV     R0,A
   \   000021   EC           MOV     A,R4
   \   000022   70E6         JNZ     ??calcFCS_1
    541          
    542            return rtrn;
   \   000024   D083         POP     DPH
   \   000026   D082         POP     DPL
   \   000028   02....       LJMP    ?BRET
    543          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sysPingReqRcvd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sysPingReqRcvd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sysPingRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sysPingRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendGtwReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendGtwReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcFCS::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcFCS

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     15   calcFCS
      3     24   sendGtwReport
        2     15   -> HalUARTWrite
        2     15   -> calcFCS
      2    138   sysPingReqRcvd
        2      0   -> sysPingRsp
      3      7   sysPingRsp
        2      7   -> HalUARTWrite
        2      7   -> calcFCS
      0    138   uartRxCB
        0    138   -> HalUARTRead
        0    138   -> sysPingReqRcvd
      0      0   zb_AllowBindConfirm
      0      0   zb_BindConfirm
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> HalLedSet
        0      9   -> zb_AllowBind
      0      9   zb_HandleOsalEvent
        0      9   -> HalLedBlink
        0      9   -> HalLedSet
        0      9   -> initUart
        0      9   -> zb_StartRequest
      0     13   zb_ReceiveDataIndication
        0      9   -> HalLedSet
        0      9   -> sendGtwReport
      0      0   zb_SendDataConfirm
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     16   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for myStartRetryDelay>
       1  P0DIR
       1  P1DIR
       1  _A_P0
       1  _A_P1
       1  allowBind
       1  appState
      43  calcFCS
       6  calcFCS::?relay
       6  gtwData
       1  myStartRetryDelay
       1  open
     253  sendGtwReport
       6  sendGtwReport::?relay
      14  sysPingReqRcvd
       6  sysPingReqRcvd::?relay
     108  sysPingRsp
       6  sysPingRsp::?relay
     103  uartRxCB
       6  uartRxCB::?relay
       3  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
       3  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
     126  zb_HandleKeys
       6  zb_HandleKeys::?relay
      80  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
     100  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
       3  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
      67  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 906 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   1 byte  in segment XDATA_I
   1 byte  in segment XDATA_ID
  14 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 985 bytes of CODE  memory
  14 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)
  10 bytes of XDATA memory

Errors: none
Warnings: none
